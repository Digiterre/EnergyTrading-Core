// <auto-generated />

namespace EnergyTrading.UnitTest.Search
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Runtime.Caching;
    using System.Threading;

    using EnergyTrading.Caching;
    using EnergyTrading.Search;
    using EnergyTrading.Test;

    using NUnit.Framework;

    using Moq;

    [TestFixture]
    public class WhenChachingAndRetrievingSinglePage : SinglePageContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 1);
        }

        [Test]
        public void PageShouldNotBeNull()
        {
            Assert.IsNotNull(this.SearchResultPage);
        }

        [Test]
        public void PageShouldContainTheSameEntityIds()
        {
            Assert.AreSame(this.SearchResult.EntityIds, this.SearchResultPage.EntityIds);
        }

        [Test]
        public void PageShouldContainSearchKey()
        {
            Assert.AreEqual("key", this.SearchResultPage.SearchResultsKey);
        }

        [Test]
        public void PageShouldContainAsofDate()
        {
            Assert.AreEqual(this.SearchResult.AsOf, this.SearchResultPage.AsOf);
        }

        [Test]
        public void NextPageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage.NextPage);
        }       
    }

    [TestFixture]
    public class ClearShouldEmptyCache : SinglePageContext
    {
        protected override void Because_of()
        {
            this.Sut.Clear();
            this.SearchResultPage = this.Sut.Get("key", 1);
        }

        [Test]
        public void PageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage);
        }
    }

    [TestFixture]
    public class WhenCachingSinglePageAndRetrievingPageNumberOutOfRange : SinglePageContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 2);
        }

        [Test]
        public void PageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage);
        }
    }

    [TestFixture]
    public class WhenCachingMultiplePagesAndRetrievingFirst : MultiplePagesContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 1);
        }

        [Test]
        public void PageShouldNotBeNull()
        {
            Assert.IsNotNull(this.SearchResultPage);
        }

        [Test]
        public void PageShouldContainCorrectNumberOfIds()
        {
            Assert.AreEqual(4, this.SearchResultPage.EntityIds.Count);
        }

        [Test]
        public void PageShouldContainCorrectIds()
        {
            Assert.AreEqual("1234", AggregateIds(this.SearchResultPage));
        }

        [Test]
        public void PageShouldContainSearchKey()
        {
            Assert.AreEqual("key", this.SearchResultPage.SearchResultsKey);
        }

        [Test]
        public void PageShouldContainAsofDate()
        {
            Assert.AreEqual(this.SearchResult.AsOf, this.SearchResultPage.AsOf);
        }

        [Test]
        public void PageShouldContainNextPage()
        {
            Assert.AreEqual(2, this.SearchResultPage.NextPage);
        }       
    }

    [TestFixture]
    public class WhenCachingMultiplePagesAndRetrievingSecond : MultiplePagesContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 2);
        }

        [Test]
        public void PageShouldNotBeNull()
        {
            Assert.IsNotNull(this.SearchResultPage);
        }

        [Test]
        public void PageShouldContainCorrectNumberOfIds()
        {
            Assert.AreEqual(4, this.SearchResultPage.EntityIds.Count);
        }

        [Test]
        public void PageShouldContainCorrectIds()
        {
            Assert.AreEqual("5678", AggregateIds(this.SearchResultPage));
        }

        [Test]
        public void PageShouldContainSearchKey()
        {
            Assert.AreEqual("key", this.SearchResultPage.SearchResultsKey);
        }

        [Test]
        public void PageShouldContainAsofDate()
        {
            Assert.AreEqual(this.SearchResult.AsOf, this.SearchResultPage.AsOf);
        }

        [Test]
        public void PageShouldContainNextPage()
        {
            Assert.AreEqual(3, this.SearchResultPage.NextPage);
        }
    }

    [TestFixture]
    public class WhenCachingMultiplePagesAndRetrievingThird : MultiplePagesContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 3);
        }

        [Test]
        public void PageShouldNotBeNull()
        {
            Assert.IsNotNull(this.SearchResultPage);
        }

        [Test]
        public void PageShouldContainCorrectNumberOfIds()
        {
            Assert.AreEqual(2, this.SearchResultPage.EntityIds.Count);
        }

        [Test]
        public void PageShouldContainCorrectIds()
        {
            Assert.AreEqual("910", AggregateIds(this.SearchResultPage));
        }

        [Test]
        public void PageShouldContainSearchKey()
        {
            Assert.AreEqual("key", this.SearchResultPage.SearchResultsKey);
        }

        [Test]
        public void PageShouldContainAsofDate()
        {
            Assert.AreEqual(this.SearchResult.AsOf, this.SearchResultPage.AsOf);
        }

        [Test]
        public void NextPageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage.NextPage);
        }
    }

    [TestFixture]
    public class WhenACachedPageHasExpired : SpecBase<SearchCache>
    {
        private Mock<ICacheItemPolicyFactory> cacheItemPolicyFactory;
        private SearchResult searchResult;
        private CacheSearchResultPage searchResultPage;

        protected override void Initialize()
        {
            this.cacheItemPolicyFactory = new Mock<ICacheItemPolicyFactory>();
        }

        protected override SearchCache Establish_context()
        {
            var cacheItemPolicy = new CacheItemPolicy {AbsoluteExpiration = DateTime.Now.AddMilliseconds(100)};
            this.cacheItemPolicyFactory.Setup(x => x.CreatePolicy()).Returns(cacheItemPolicy);
            return new SearchCache(this.cacheItemPolicyFactory.Object);
        }

        protected override void Because_of()
        {
            this.searchResult = new SearchResult(new List<int>(), DateTime.Now, false, null);
            this.Sut.Add("key", this.searchResult);
            Thread.Sleep(200);
            this.searchResultPage = this.Sut.Get("key", 1);
        }

        [Test]
        public void ResultPageShouldBeNull()
        {
            Assert.IsNull(this.searchResultPage);
        }
    }

    [TestFixture]
    public class WhenRequestedPageNumberOutOfRange : MultiplePagesContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("key", 4);
        }

        [Test]
        public void ResultPageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage);
        }
    }

    [TestFixture]
    public class WhenKeyNotInCache : MultiplePagesContext
    {
        protected override void Because_of()
        {
            this.SearchResultPage = this.Sut.Get("notakey", 1);
        }

        [Test]
        public void ResultPageShouldBeNull()
        {
            Assert.IsNull(this.SearchResultPage);
        }
    }

    public class SinglePageContext : SpecBase<SearchCache>
    {
        private Mock<ICacheItemPolicyFactory> cacheItemPolicyFactory;
        private SearchResult searchResult;
        private CacheSearchResultPage searchResultPage;

        protected override void Initialize()
        {
            this.cacheItemPolicyFactory = new Mock<ICacheItemPolicyFactory>();
        }

        protected override SearchCache Establish_context()
        {
            var searchCache = new SearchCache(this.cacheItemPolicyFactory.Object);

            this.searchResult = new SearchResult(new List<int> { 1, 2, 3 }, DateTime.Now, multiPage: false, pageSize: null);
            searchCache.Add("key", this.searchResult);

            return searchCache;
        }

        protected SearchResult SearchResult
        {
            get
            {
                return this.searchResult;
            }
        }

        protected CacheSearchResultPage SearchResultPage
        {
            get
            {
                return this.searchResultPage;
            }
            set
            {
                this.searchResultPage = value;
            }
        }
    }

    public class MultiplePagesContext : SpecBase<SearchCache>
    {
        private Mock<ICacheItemPolicyFactory> cacheItemPolicyFactory;
        private SearchResult searchResult;
        private CacheSearchResultPage searchResultPage;

        protected override void Initialize()
        {
            this.cacheItemPolicyFactory = new Mock<ICacheItemPolicyFactory>();
        }

        protected override SearchCache Establish_context()
        {
            var searchCache = new SearchCache(this.cacheItemPolicyFactory.Object);

            // 10 items - page size 4 - expect 3 pages
            this.searchResult = new SearchResult(new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, DateTime.Now, multiPage: true, pageSize: 4);
            searchCache.Add("key", this.searchResult);

            return searchCache;
        }

        protected SearchResult SearchResult
        {
            get
            {
                return this.searchResult;
            }
        }

        protected CacheSearchResultPage SearchResultPage
        {
            get
            {
                return this.searchResultPage;
            }
            set
            {
                this.searchResultPage = value;
            }
        }

        protected static string AggregateIds(CacheSearchResultPage searchResultPage)
        {
            return searchResultPage.EntityIds.Aggregate(string.Empty, (x, y) => string.Concat(x, y.ToString(CultureInfo.InvariantCulture)));
        }
    }
}